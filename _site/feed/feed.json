{
  "version": "https://jsonfeed.org/version/1",
  "title": "Drew&#39;s 11ty Demo",
  "home_page_url": "https://update-me.com",
  "feed_url": "https://update-me.com/feed/feed.json",
  "description": "Description of the website. Update me.",
  "author": {
    "name": "Drew Ronk",
    "url": ""
  },
  "items": [{
      "id": "https://update-me.com/posts/thirdpost/",
      "url": "https://update-me.com/posts/thirdpost/",
      "title": "Getting Started with Docker: Docker Playground",
      "content_html": "<p>In a previous article, I stumbled my way through a tutorial on <a href=\"https://dev.to/dronk6/getting-started-with-docker-windows-11-3ihn\">how to install Docker for Windows 11</a>; however, I made it pretty clear I had <em>no idea</em> how to use Docker (let alone what it was) at the time. So, I'm going to use this post to learn more by starting the tutorial on Docker's website: <a href=\"https://www.docker.com/101-tutorial\">Docker Playground</a>, which is their free way to learn the system. I'm also going to talk a little about Docker itself, and discuss how to create a Dockerfile using <a href=\"https://www.docker.com/101-tutorial\">this microservice</a> as a backdrop. Let's get to it!</p>\n<h2 id=\"why-is-docker-so-powerful%3F\">Why is Docker so Powerful? <a class=\"direct-link\" href=\"#why-is-docker-so-powerful%3F\">#</a></h2>\n<p>I talk a little about this in that post I linked above, but Docker is <em>incredibly</em> powerful. This is because container-based architecture allows for the creation of instances of an application, allowing a developer to customize and replicate these instances as much as they want without interfering with anything else on a user's system.</p>\n<p>Docker takes this to another level, as it allows developers to toss everything needed to run an app into one easily-distributed package, then ship it to any system that can support the application. This makes the application easier to manage--because they're not relying on users to have (most) of the necessary dependencies--and infinitely scalable. Which is a huge deal, because it allows users to have a faster, lighter experience with an application that is still tied into the same backend.</p>\n<p>With that in mind, let's try it out.</p>\n<h2 id=\"docker-playground\">Docker Playground <a class=\"direct-link\" href=\"#docker-playground\">#</a></h2>\n<p><a href=\"https://www.docker.com/101-tutorial\">Docker Playground</a> is Docker's free, online tutorial for learning Docker. Once you get through the initial steps, they provide a verbose guide that can get you going with a container. So, I'll go through the first couple of steps to get going then I'll leave the rest to you!</p>\n<h3 id=\"step-1%3A-access-play-with-docker-and-sign-in\">Step 1: Access Play With Docker and Sign In <a class=\"direct-link\" href=\"#step-1%3A-access-play-with-docker-and-sign-in\">#</a></h3>\n<p>First, we'll navigate to the <a href=\"https://labs.play-with-docker.com/\">Play with Docker</a> starting page, which should look like this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3d7zld6ibh1fhc4dpsg7.png\" alt=\"Play with Docker Start Page\"></p>\n<p>Click Start, and you'll be prompted to sign in with a GitHub or Docker account. Feel free to do whichever is easier for you, but do not purchase anything if you decide to create a Docker account--the tutorial and Docker Playground are free.</p>\n<h3 id=\"step-2%3A-create-a-new-instance\">Step 2: Create a New Instance <a class=\"direct-link\" href=\"#step-2%3A-create-a-new-instance\">#</a></h3>\n<p>Once you are signed in, click the &quot;Add New Instance&quot; button to create a virtualized container in Docker Playground. If you did so successfully, your page will look something like this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffbt819cfbb429eehuyk.png\" alt=\"Instance Created Page\"></p>\n<h3 id=\"step-3%3A-access-the-docker-101-tutorial\">Step 3: Access the Docker 101 Tutorial <a class=\"direct-link\" href=\"#step-3%3A-access-the-docker-101-tutorial\">#</a></h3>\n<p>To access the Docker 101 Tutorial, you actually have to use the instance you've just created. So, type the following command in the Command Line Interface on Docker Playground and hit Enter:</p>\n<p><code>docker run -dp 80:80 docker/getting-started:pwd</code></p>\n<p>After this command processes, you'll see that a hyperlinked &quot;<strong>80</strong>&quot; has appeared next to the &quot;Open Port&quot; button at the top of the screen, like so:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fs6ze036aoqrqq5l6sq.png\" alt=\"Port 80 Hyperlink Image\"></p>\n<p><strong><em>Click this link, and you'll be taken to the Docker 101 tutorial. From there, you can navigate through the tutorial and learn more about Docker via the Docker Playground!</em></strong></p>\n<h2 id=\"creating-a-dockerfile\">Creating a Dockerfile <a class=\"direct-link\" href=\"#creating-a-dockerfile\">#</a></h2>\n<p>A Dockerfile is a set of instructions, called a <a href=\"https://searchitoperations.techtarget.com/definition/Docker-image\">Docker image</a>, which Docker uses to build your application within a container. As these instructions essentially define how the Docker container will handle the process of running your application, it is important that this file exists in your container prior to you attempting to run your application. Below, we'll look at an example of a Dockerfile that was created for a <a href=\"https://github.com/heyMP/ist402-docker/tree/master/labs/7-news-api-microservice\">NewsAPI Microservice</a>, then show what having this Dockerfile properly configured can do for you.</p>\n<blockquote>\n<h4 id=\"how-are-dockerfiles-created%3F\">How are Dockerfiles created? <a class=\"direct-link\" href=\"#how-are-dockerfiles-created%3F\">#</a></h4>\n</blockquote>\n<p><em>When you're configuring a container, typically you'll be creating a custom Dockerfile. To do so, you just create a text file titled &quot;Dockerfile&quot; in your container's directory, then insert the commands necessary for your container.</em></p>\n<h3 id=\"what's-in-a-dockerfile%3F\">What's in a Dockerfile? <a class=\"direct-link\" href=\"#what's-in-a-dockerfile%3F\">#</a></h3>\n<p>This can depend on what the Dockerfile is being used for, but in this case we actually have two: one for the visual web component, and another for the server that accesses an API. To avoid confusion, we'll just focus on the server. Below is what we have in that file:</p>\n<pre><code>FROM node:12\n\nWORKDIR /home/node/app\n\nCOPY package.json ./\nRUN yarn install\n\nCOPY . .\n\nCMD [ &quot;yarn&quot;, &quot;start&quot; ]\n</code></pre>\n<p>The capitalized words in this file represent commands, which Docker uses to create an environment conducive for your application to run--regardless of the system it's on. Let's look at each of these commands:</p>\n<h4 id=\"from\">FROM <a class=\"direct-link\" href=\"#from\">#</a></h4>\n<p>The first thing we see here is the &quot;FROM&quot; instruction. This is always the first command in a Dockerfile, as it indicates that this Dockerfile is the base image is for the container.</p>\n<h4 id=\"workdir\">WORKDIR <a class=\"direct-link\" href=\"#workdir\">#</a></h4>\n<p>This instruction key establishes the working directory where subsequent commands will be run.</p>\n<h4 id=\"copy\">COPY <a class=\"direct-link\" href=\"#copy\">#</a></h4>\n<p>The first time this command is shown, it's copying our application's package.json file into the working directory. The way we can see this is the <code>./</code> that follows <code>package.json</code> in the command, which signifies that this is the destination for our copy. In this case, copying this will allow us to then use that package.json to install the app's necessary dependencies using:</p>\n<h4 id=\"run\">RUN <a class=\"direct-link\" href=\"#run\">#</a></h4>\n<p>RUN can be used in a variety of ways, but in this example it's being used to run a <code>yarn install</code> command--which installs all the dependencies needed to allow our application to run in the Docker container.</p>\n<h4 id=\"copy-(again)\">COPY (again) <a class=\"direct-link\" href=\"#copy-(again)\">#</a></h4>\n<p>We already talked a little about COPY, but this time the thing that's being copied is a shorthand, <code>.  .</code>, which indicates that everything (<code>.</code>) is being copied to the working directory, allowing the container to be configured to work with the application.</p>\n<h4 id=\"cmd\">CMD <a class=\"direct-link\" href=\"#cmd\">#</a></h4>\n<p>And finally, we have CMD. The CMD command takes in an array of parameterized commands, which will then be run when the Dockerfile is used to build your application. So, this CMD's array equates to <code>yarn start</code>, which is a command that uses <a href=\"https://yarnpkg.com/\">yarn</a> to start the application. As this is the final command in the Dockerfile, at this point our application is built within the container!</p>\n<p><strong><em>If you'd like to learn more about Dockerfile commands, <a href=\"https://takacsmark.com/dockerfile-tutorial-by-example-dockerfile-best-practices-2018/#dockerfile-key-instructions-best-practices\">this article</a> breaks each down with great examples.</em></strong></p>\n<h3 id=\"what's-next%3F\">What's Next? <a class=\"direct-link\" href=\"#what's-next%3F\">#</a></h3>\n<p>At this point, you can run the application since you've successfully built it using the Dockerfile. In the case of <a href=\"https://github.com/heyMP/ist402-docker/tree/master/labs/7-news-api-microservice\">our example</a>, this would involve running the <code>docker-compose up</code> command. Which allows you to view our example application's front-end, which lists hyperlinked articles from NewsAPI:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avhsunt5pbax3pxu0t97.png\" alt=\"NewsApp Results\"></p>\n",
      "date_published": "2022-02-23T19:00:00-05:00"
    },{
      "id": "https://update-me.com/posts/secondpost/",
      "url": "https://update-me.com/posts/secondpost/",
      "title": "APIs: Fetching Data and an Example via Wikipedia",
      "content_html": "<p>APIs, or Application Programming Interfaces, are an incredibly useful tool for accessing data from an external source. Retrieving, storing, and using this data typically requires a programmatic API call, which can be done using a language such as JavaScript. In this article, we'll be discussing how data can be retrieved via the fetch() function in JavaScript, then analyzing a commonly-used API that can be accessed through an HTML tag: the <a href=\"https://en.wikipedia.org/w/api.php\">Wikipedia API</a>.</p>\n<h2 id=\"fetch()ing-data\">fetch()ing Data <a class=\"direct-link\" href=\"#fetch()ing-data\">#</a></h2>\n<p>When working with an API, a common starting point is calling upon the API to retrieve some information. This info can then be stored in a variable within your application, which gives you plenty of options for using and manipulating that data. One way this can be done in JavaScript is using the fetch() function, which directly calls upon an API by treating the API's link as a parameter.</p>\n<p>Below is an example fetch() call, which accesses an API called &quot;FreeGeoIP&quot; that returns a user's IP address when called:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ir42tefplcrd62frr0x.png\" alt=\"getGEOIPData() function breakdown\"></p>\n<p>As you can see, the getGEOIPData() function handles the fetch() method call, where the API's link is one of the parameters passed into fetch(). The API call reaches out to the API at this link, then uses the response that is returned to determine whether to store data from the fetch() call. In this case, a successful API call would grant us access to information such as the IP address' geographic coordinates, city, and state, which we are storing further down in the getGEOIPData() function.</p>\n<p>Since I'm working with <a href=\"https://lit.dev/\">LitElement</a> in this case, you can see I'm assigning the data I got back to global variables that were initially created in the application's constructor. This allows me to mutate the location information in my constructor, and carry my data changes throughout my entire web page, every time I make another call to the API--such as when I press a button to call it or refresh the page.</p>\n<h2 id=\"the-wikipedia-api\">The Wikipedia API <a class=\"direct-link\" href=\"#the-wikipedia-api\">#</a></h2>\n<p>Using the data we stored in getGEOIPData(), we could learn more about the location that our IP address is tied to by working with the Wikipedia API. The Wikipedia API can be accessed using a fetch() call as well, or through <a href=\"https://www.npmjs.com/package/@lrnwebcomponents/wikipedia-query\">this</a> very cool HTML tag that simplifies the call into an embeddable component. For this article, we'll be using that tag, which is called <code>wikipedia-query</code>. This is incredibly useful, as a simple import and implementation of the tag allows us to embed a preview of a Wikipedia article directly into our web page, like so:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7ss8y6ll01pgsoj00i2.png\" alt=\"Embedded Wikipedia Article Image\"></p>\n<p>All you'd end up adding to your HTML, or in my case the render() function in my Lit implementation, is a <code>wikipedia-query</code> tag with the search parameter tied to whatever I want. Below, you can see the three different options I went with--all of which are information I pulled from the IP address data returned from the API call discussed earlier:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngrg73lpu0ei5r5q5k3t.png\" alt=\"Wikipedia-query tags\"></p>\n<p>Using a tag like those pictured above and an import call, I could very easily learn more about my current location based on the IP address that my device is using to access the internet--all in a web page!</p>\n<blockquote>\n<p>Here's the import statement you'd need to make it work: <code>import { WikipediaQuery } from '@lrnwebcomponents/wikipedia-query/wikipedia-query.js';</code></p>\n</blockquote>\n<p>All of this is possible because Wikipedia's powerful API allows a user to enter a search term into an API call, and returns bundled information that can then be elegantly presented to a user.</p>\n<p>This is just scratching the surface of APIs and their capabilities, but it shows just how limitless their uses and possibilities can be!</p>\n",
      "date_published": "2022-01-30T19:00:00-05:00"
    },{
      "id": "https://update-me.com/posts/firstpost/",
      "url": "https://update-me.com/posts/firstpost/",
      "title": "Getting Started with Docker: Windows 11",
      "content_html": "<p>Before writing this article, I had never worked with Docker before. In fact, I didn't even know what it was. However, through a lot of Googling and trial-and-error, I found enough information to go from crawling to slowly walking. Let's get you there too.</p>\n<p>In this demo, I'll be covering what Docker is, how to download it on Windows 11 OS, and getting Docker Desktop up and running with an example GitHub repo.</p>\n<h2 id=\"what-is-docker%3F\">What is Docker? <a class=\"direct-link\" href=\"#what-is-docker%3F\">#</a></h2>\n<p>Docker is a platform-as-a-service (PAAS) software that allows users to put their entire application into a virtual &quot;container.&quot; This means that, rather than using your desktop to host an application, you can isolate your entire app within a single container--allowing you to manage multiple applications at once and utilize multiple versions of required software for your applications. All of this means you can manipulate your applications with more power and flexibility than was previously possible.</p>\n<p><em>For more information about containers and Docker's logic, go to <a href=\"https://www.docker.com/resources/what-container\">this guide</a>.</em></p>\n<h2 id=\"downloading-docker-for-windows-11\">Downloading Docker for Windows 11 <a class=\"direct-link\" href=\"#downloading-docker-for-windows-11\">#</a></h2>\n<p><em>Before we get into the steps, you need to make sure your machine is running <strong>Windows 11</strong> and is <strong>at least 64-bits</strong>. You can do this by navigating to the Windows Settings application and going to System &gt; About. In this menu, you'll find your System Type and Windows Edition.</em></p>\n<h3 id=\"step-1%3A-download-and-install-docker-desktop\">Step 1: Download and Install Docker Desktop <a class=\"direct-link\" href=\"#step-1%3A-download-and-install-docker-desktop\">#</a></h3>\n<p>Click <a href=\"https://www.docker.com/products/docker-desktop\">this link</a> and click the &quot;Download for Windows&quot; button. Your version should be automatically detected.</p>\n<p>Once you've downloaded the installer, run it. At this point, you'll be taken through the setup wizard. When you finish this, you should be able to open the application.</p>\n<h3 id=\"step-2%3A-uh-oh.\">Step 2: Uh oh. <a class=\"direct-link\" href=\"#step-2%3A-uh-oh.\">#</a></h3>\n<p>Docker has some ancillary tools that you also need to install just to get it up and running, so you'll likely receive an error when you first try to open it. It happened to me, and this is the error message I saw:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z13u1421kpytg6rszrww.png\" alt=\"Install WSL 2\"></p>\n<p><em>Do not worry, the resolution is very simple...</em></p>\n<h3 id=\"step-3%3A-install-wsl-2\">Step 3: Install WSL 2 <a class=\"direct-link\" href=\"#step-3%3A-install-wsl-2\">#</a></h3>\n<p>WSL, or the Windows Subsystem for Linux, helps ensure Docker can compatibly run with your Windows computer. To install it, you can click the link in the error message shown above if it pops up on your screen when you try to open Docker, or you can go to <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package\">this link</a>.</p>\n<p>Go through steps four and five of the instructions in that link, then try closing Docker and opening it again.</p>\n<h3 id=\"step-4%3A-the-tutorial\">Step 4: The Tutorial <a class=\"direct-link\" href=\"#step-4%3A-the-tutorial\">#</a></h3>\n<p>When you re-open Docker, it should open successfully and you'll see a tutorial. I highly recommend going through it, as it's brief but helpful in getting you acclimated to the system.</p>\n<h3 id=\"(optional)-step-5%3A-sign-in%2Fup\">(Optional) Step 5: Sign in/up <a class=\"direct-link\" href=\"#(optional)-step-5%3A-sign-in%2Fup\">#</a></h3>\n<p>Since this was my first time using Docker, I had to sign up using the button in Docker Desktop. If you've never used Docker, it's worth creating an account so you can use the platform to its fullest.</p>\n<p><em><strong>At this point, you've successfully installed Docker Desktop! Next, we'll take a look at how to get started with an example demo.</strong></em></p>\n<h2 id=\"example-with-haxcms\">Example with HAXcms <a class=\"direct-link\" href=\"#example-with-haxcms\">#</a></h2>\n<p>To get started, we'll need a GitHub repo with a fully-fledged application. In my case, I'll be using <a href=\"https://github.com/elmsln/haxcms\">HAXcms</a>: a content management system that encapsulates the incredibly accessible authoring experience of <a href=\"HAXTheWeb.org\">HAX</a>. Let's get going!</p>\n<h3 id=\"step-1%3A-the-dev-environments-tab\">Step 1: The Dev Environments Tab <a class=\"direct-link\" href=\"#step-1%3A-the-dev-environments-tab\">#</a></h3>\n<p>Navigate to the &quot;Dev Environments&quot; Tab in Docker Desktop, and click the &quot;Create&quot; button. Click the &quot;Get Started&quot; button in the guide that pops up, and the following screen should appear:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czzwtb4zd5h5kmc0kidw.png\" alt=\"Create a Dev Environment\"></p>\n<p><em>As you can see in the image, I've already put a link into the &quot;Enter the Git Repository&quot; box. Below, I'll show you where to get a link to put in this box.</em></p>\n<h3 id=\"step-2%3A-getting-the-https-link-from-a-github-repo\">Step 2: Getting the HTTPS Link From a GitHub Repo <a class=\"direct-link\" href=\"#step-2%3A-getting-the-https-link-from-a-github-repo\">#</a></h3>\n<p>Navigate to your GitHub repo of choice, and select the green &quot;Clone&quot; button. A dropdown menu should populate, and you'll want to copy the link that appears in the HTTPS tab. Kind of like this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ukhzvyyy3w0dfj52nxd.png\" alt=\"Clone a Repo\"></p>\n<p>Paste the link you copied into the &quot;Enter the Git Repository&quot; box, and click the &quot;Continue&quot; button.</p>\n<p>The Dev Environment will take a little time to generate, then you'll see a page indicating that it's all set up.</p>\n<h3 id=\"step-3%3A-get-going-in-vscode\">Step 3: Get Going in VSCode <a class=\"direct-link\" href=\"#step-3%3A-get-going-in-vscode\">#</a></h3>\n<p>At this point, your Dev Environments tab in Docker Desktop should be showing the container you created and your Containers/Apps tab will show that your container is running. Way to go!</p>\n<p>Now, you can start working with your container in VSCode. To do this, click on the container listed in your Dev Environments tab. It should look similar to this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6yn4g3wx3gmfitmt4ue.png\" alt=\"Dev Environments with Running Container\"></p>\n<p>To open VSCode, just click the button. When you do, you may have to install one or two additional tools--or even VSCode itself if you don't have it already. If this is the case, follow the steps provided and you'll be viewing your container's code in no time!</p>\n<p><strong><em>For more information about Docker and initial steps, feel free to view this <a href=\"https://medium.com/free-code-camp/docker-simplified-96639a35ff36#06d9\">guide</a> from freeCodeCamp. I found it very useful, especially for learning about Docker's basic commands. Good luck!</em></strong></p>\n",
      "date_published": "2022-01-15T19:00:00-05:00"
    }
  ]
}
